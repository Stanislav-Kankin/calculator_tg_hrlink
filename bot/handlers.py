from aiogram import Dispatcher, Bot
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types.input_file import FSInputFile
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import UserData, LicenseCosts
from states import Form
from keyboards import (
    get_start_keyboard, get_contact_keyboard,
    get_license_type_keyboard, get_confirmation_keyboard,
    get_retry_keyboard
)
from calculations import (
    calculate_documents_per_year, calculate_pages_per_year,
    calculate_total_paper_costs, calculate_total_logistics_costs,
    calculate_cost_per_minute, calculate_total_operations_costs,
    calculate_total_license_costs
)
from decouple import Config, RepositoryEnv
from graph import generate_cost_graph
import os
import aiohttp
import re
from datetime import datetime, timedelta
from broadcast import send_broadcast
import logging

config = Config(RepositoryEnv('.env'))
BOT_TOKEN = config('BOT_TOKEN')
CHAT_ID = config('CHAT_ID')
bot = Bot(token=BOT_TOKEN)

engine = create_engine('sqlite:///user_data.db')
Session = sessionmaker(bind=engine)


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_users, Command("users"))
    dp.message.register(cmd_broadcast, Command("broadcast"))

    dp.callback_query.register(
        process_users_day, lambda c: c.data == "users_day"
        )
    dp.callback_query.register(
        process_users_week, lambda c: c.data == "users_week"
        )
    dp.callback_query.register(
        process_users_month, lambda c: c.data == "users_month"
        )
    dp.callback_query.register(
        process_users_quarter, lambda c: c.data == "users_quarter"
        )
    dp.callback_query.register(
        process_users_year, lambda c: c.data == "users_year"
        )

    dp.message.register(process_day_input, StateFilter(
        Form.waiting_for_day))
    dp.message.register(process_week_input, StateFilter(
        Form.waiting_for_week))
    dp.message.register(process_month_input, StateFilter(
        Form.waiting_for_month))
    dp.message.register(process_quarter_input, StateFilter(
        Form.waiting_for_quarter))
    dp.message.register(process_year_input, StateFilter(
        Form.waiting_for_year))
    dp.callback_query.register(start_form, lambda c: c.data == "start_form")
    dp.message.register(
        restart_form, lambda message: message.text.lower() == '–∑–∞–Ω–æ–≤–æ')
    dp.message.register(
        stop_form, lambda message: message.text.lower() == '—Å—Ç–æ–ø')
    dp.callback_query.register(
        process_license_type, lambda c: c.data in [
            "simple_kedo", "standard_kedo"
            ])
    dp.message.register(
        process_hr_specialist_count, StateFilter(Form.hr_specialist_count))
    dp.message.register(
        process_organization_name, StateFilter(Form.organization_name))
    dp.message.register(process_employee_count, StateFilter(
        Form.employee_count))
    dp.message.register(
        process_documents_per_employee, StateFilter(
            Form.documents_per_employee))
    dp.message.register(process_pages_per_document, StateFilter(
        Form.pages_per_document))
    dp.message.register(process_turnover_percentage, StateFilter(
        Form.turnover_percentage))
    dp.message.register(process_average_salary, StateFilter(
        Form.average_salary))
    dp.message.register(
        process_courier_delivery_cost, StateFilter(
            Form.courier_delivery_cost))
    dp.message.register(
        process_hr_delivery_percentage, StateFilter(
            Form.hr_delivery_percentage))
    dp.callback_query.register(contact_me, lambda c: c.data == "contact_me")
    dp.message.register(process_contact_name, StateFilter(Form.contact_name))
    dp.message.register(process_contact_phone, StateFilter(Form.contact_phone))
    dp.message.register(process_contact_email, StateFilter(Form.contact_email))
    dp.message.register(process_contact_preference, StateFilter(
        Form.contact_preference))
    dp.message.register(echo)
    dp.callback_query.register(
        process_callback, lambda c: c.data in ["restart", "stop", "confirm"])


async def cmd_broadcast(message: Message):
    await send_broadcast(bot)  # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä bot –Ω–∞–ø—Ä—è–º—É—é


async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–¥–∞–Ω–æ"
    print(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /start. user_id: {user_id}, username: {username}"
        )
    session = Session()
    user_exists = session.query(UserData).filter_by(user_id=user_id).first()
    session.close()

    if not user_exists:
        try:
            await send_new_user_notification(user_id, username)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    user_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ö–î–ü –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –∏"
        " –±–æ—Ç –ø–æ—Å—á–∏—Ç–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –±—É–º–∞–∂–Ω—ã–º –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º "
        "–∫–∞–¥—Ä–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–æ–º üí∞\n"
    )
    await message.answer(
        text=user_text, reply_markup=get_start_keyboard(),
        parse_mode=ParseMode.HTML)


async def cmd_users(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–µ–Ω—å", callback_data="users_day")],
        [InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="users_week")],
        [InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data="users_month")],
        [InlineKeyboardButton(text="–ö–≤–∞—Ä—Ç–∞–ª", callback_data="users_quarter")],
        [InlineKeyboardButton(text="–ì–æ–¥", callback_data="users_year")]
    ])

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard
    )


async def process_users_day(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(Form.waiting_for_day)


async def process_day_input(message: Message, state: FSMContext):
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(selected_date=date)

        session = Session()
        users_count = session.query(UserData).filter(
            UserData.timestamp >= date,
            UserData.timestamp < date + timedelta(days=1)
        ).distinct(UserData.user_id).count()
        session.close()

        await message.answer(
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {
                date.strftime('%d.%m.%Y')
                }: {users_count}"
            )
        await state.clear()
    except ValueError:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )


async def process_users_week(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–ù.–ì–ì–ì–ì:"
        )
    await state.set_state(Form.waiting_for_week)


async def process_week_input(message: Message, state: FSMContext):
    try:
        week, year = map(int, message.text.split('.'))
        start_of_week = datetime.fromisocalendar(year, week, 1)
        end_of_week = start_of_week + timedelta(weeks=1)

        session = Session()
        users_count = session.query(UserData).filter(
            UserData.timestamp >= start_of_week,
            UserData.timestamp < end_of_week
        ).distinct(UserData.user_id).count()
        session.close()

        await message.answer(
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {week} "
            f"–Ω–µ–¥–µ–ª—é {year} –≥–æ–¥–∞: {users_count}"
            )
        await state.clear()
    except (ValueError, IndexError):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä "
            "–Ω–µ–¥–µ–ª–∏ –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–ù.–ì–ì–ì–ì:"
            )


async def process_users_month(
        callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì:")
    await state.set_state(Form.waiting_for_month)


async def process_month_input(message: Message, state: FSMContext):
    try:
        month, year = map(int, message.text.split('.'))
        if month < 1 or month > 12:
            raise ValueError("–ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12.")

        start_of_month = datetime(year, month, 1)
        end_of_month = datetime(
            year, month + 1, 1) if month < 12 else datetime(year + 1, 1, 1)

        session = Session()
        users_count = session.query(UserData).filter(
            UserData.timestamp >= start_of_month,
            UserData.timestamp < end_of_month
        ).distinct(UserData.user_id).count()
        session.close()

        await message.answer(
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {month} "
            f"–º–µ—Å—è—Ü {year} –≥–æ–¥–∞: {users_count}"
            )
        await state.clear()
    except (ValueError, IndexError):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì:"
            )


async def process_users_quarter(
        callback_query: CallbackQuery,
        state: FSMContext):
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞ –∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ö.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2023):"
        )
    await state.set_state(Form.waiting_for_quarter)


async def process_quarter_input(message: Message, state: FSMContext):
    try:
        quarter, year = map(int, message.text.split('.'))
        if quarter < 1 or quarter > 4:
            raise ValueError("–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4.")

        start_of_quarter = datetime(year, 3 * (quarter - 1) + 1, 1)
        end_of_quarter = datetime(
            year, 3 * quarter + 1, 1
            ) if quarter < 4 else datetime(year + 1, 1, 1)

        session = Session()
        users_count = session.query(UserData).filter(
            UserData.timestamp >= start_of_quarter,
            UserData.timestamp < end_of_quarter
        ).distinct(UserData.user_id).count()
        session.close()

        await message.answer(
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {quarter} "
            f"–∫–≤–∞—Ä—Ç–∞–ª {year} –≥–æ–¥–∞: {users_count}"
            )
        await state.clear()
    except (ValueError, IndexError):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∞–ª–∞ –∏ "
            "–≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ö.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2023):"
            )


async def process_users_year(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì:")
    await state.set_state(Form.waiting_for_year)


async def process_year_input(message: Message, state: FSMContext):
    try:
        year = int(message.text)
        start_of_year = datetime(year, 1, 1)
        end_of_year = datetime(year + 1, 1, 1)

        session = Session()
        users_count = session.query(UserData).filter(
            UserData.timestamp >= start_of_year,
            UserData.timestamp < end_of_year
        ).distinct(UserData.user_id).count()
        session.close()

        await message.answer(
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {year} –≥–æ–¥: {users_count}"
            )
        await state.clear()
    except ValueError:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì:"
            )


async def send_new_user_notification(user_id: int, username: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.

    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    """
    notification_text = (
        "üöÄ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n"
        f"<b>ID:</b> {user_id}\n"
        f"<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{username}\n"
        f"<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )

    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text=notification_text,
            parse_mode=ParseMode.HTML
        )
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def start_form(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "<b>–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.employee_count)
    await state.update_data(user_id=callback_query.from_user.id)


async def restart_form(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.employee_count)
    await state.update_data(user_id=message.from_user.id)


async def stop_form(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."
        "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç–æ–≤."
        )


async def process_employee_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>",
            parse_mode=ParseMode.HTML)
        return

    employee_count = int(message.text)
    await state.update_data(employee_count=employee_count)

    if 0 < employee_count <= 499:
        await message.answer(
            "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ö–≠–î–û –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç:\n"
            "\n"
            "<b><u>HRlink Lite</u> - –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>\n"
            "- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ¬´1–°:–ó–£–ü¬ª –∏ ¬´1–°:–§—Ä–µ—à¬ª;\n"
            "- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ø–æ—á—Ç—É;\n"
            "- –æ–±–ª–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ;\n"
            "- —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã.\n"
            "\n"
            "<b><u>HRlink Standard</u> - –¥–ª—è –∫–∞–¥—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ </b>"
            "<b>—Å –Ω–µ—Ç–∏–ø–æ–≤—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏</b> "
            "<b>–∏ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:</b>\n"
            "- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ¬´1–°¬ª, ¬´–ë–∏—Ç—Ä–∏–∫—Å24¬ª, ¬´–ë–û–°–°-–ö–∞–¥—Ä–æ–≤–∏–∫¬ª, SAP;\n"
            "- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram, –ø–æ—á—Ç—É –∏ –°–ú–°;\n"
            "- –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è;\n"
            "- —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ;\n"
            "- –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.\n"
            "\n"
            "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è.</b>",
            reply_markup=get_license_type_keyboard(),
            parse_mode=ParseMode.HTML)
        await state.set_state(Form.license_type)
    elif 500 <= employee_count <= 1999:
        await state.update_data(
            license_type="standard",
            employee_license_cost=700,
            tariff_name="HRlink Standard")
        await message.answer(
            "<b>–°–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
            parse_mode=ParseMode.HTML)
        await state.set_state(Form.hr_specialist_count)
    elif employee_count >= 2000:
        await state.update_data(
            license_type="enterprise",
            employee_license_cost=600,
            tariff_name="HRlink Enterprise")
        await message.answer(
            "<b>–°–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
            parse_mode=ParseMode.HTML)
        await state.set_state(Form.hr_specialist_count)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
            parse_mode=ParseMode.HTML)


async def process_license_type(
        callback_query: CallbackQuery, state: FSMContext
        ):
    license_type = "lite" if callback_query.data == "simple_kedo" else "standard"
    await state.update_data(license_type=license_type)

    if license_type == "lite":
        employee_license_cost = 500
        tariff_name = "HRlink Lite"
    else:
        employee_license_cost = 700
        tariff_name = "HRlink Standard"

    await state.update_data(employee_license_cost=employee_license_cost)
    await state.update_data(tariff_name=tariff_name)

    await callback_query.message.answer(
        "<b>–°–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.hr_specialist_count)


async def process_hr_specialist_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>",
            parse_mode=ParseMode.HTML)
        return
    await state.update_data(hr_specialist_count=int(message.text))
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞ –≥–æ–¥?\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ –æ–∫–æ–ª–æ 30 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
        "–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.documents_per_employee)


async def process_documents_per_employee(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        if value <= 0:
            raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
        )
        return

    await state.update_data(documents_per_employee=int(value))
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–∞–∂–¥–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ?\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ 1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã.  –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, "
        "–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.pages_per_document)


async def process_pages_per_document(message: Message, state: FSMContext):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∑–∞–ø—è—Ç—É—é
        value = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ c —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π.</b>",
            parse_mode=ParseMode.HTML
        )
        return

    await state.update_data(pages_per_document=value)
    await message.answer(
        "–ö–∞–∫–æ–π <b>–ø—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–∫—É—á–∫–∏</b> –≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏?\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∑–Ω–∞–∫ ¬´%¬ª —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.turnover_percentage)


async def process_turnover_percentage(message: Message, state: FSMContext):
    try:
        value = float(message.text.replace('%', '').strip())
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.HTML)
        return
    await state.update_data(turnover_percentage=value)
    await message.answer(
        "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ "
        "–æ—Ç–¥–µ–ª–∞ –∫–∞–¥—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤?\n"
        "\n"
        "–î–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã <b>–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏</b>, "
        "–∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ –∫–∞–¥—Ä–æ–≤ —Ç—Ä–∞—Ç—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É "
        "—Å –±—É–º–∞–∂–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ "
        "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤–Ω–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å "
        "—ç—Ç–æ –≤—Ä–µ–º—è –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è "
        "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á.\n"
        "–í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.average_salary)


async def process_average_salary(message: Message, state: FSMContext):
    try:
        value = float(message.text)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.HTML)
        return
    await state.update_data(average_salary=value)
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å—Ç–æ–∏—Ç –æ–¥–Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫–∞—è "
        "–¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?\n"
        "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ—Ç –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.courier_delivery_cost)


async def process_courier_delivery_cost(message: Message, state: FSMContext):
    try:
        value = float(message.text)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.HTML)
        return

    await state.update_data(courier_delivery_cost=value)

    if value > 0:
        await message.answer(
            "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ "
            "–∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∑–Ω–∞–∫ ¬´%¬ª —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.",
            parse_mode=ParseMode.HTML)
        await state.set_state(Form.hr_delivery_percentage)
    else:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ—Ü–µ–Ω—Ç–µ
        await state.update_data(hr_delivery_percentage=0)
        await save_data(message, state, bot)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ


async def process_hr_delivery_percentage(message: Message, state: FSMContext):
    try:
        value = float(message.text.replace('%', '').strip())
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.HTML)
        return
    await state.update_data(hr_delivery_percentage=value)
    await state.update_data(user_id=message.from_user.id)

    # –í—ã–∑—ã–≤–∞–µ–º save_data —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    await save_data(message, state, bot)


async def save_data(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    session = Session()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id
    user_data = session.query(UserData).filter_by(
        user_id=message.from_user.id).first()

    if user_data:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        user_data.organization_name = data.get(
            'organization_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        user_data.employee_count = data.get(
            'employee_count', None)
        user_data.hr_specialist_count = data.get('hr_specialist_count', None)
        user_data.license_type = data.get('license_type', 'standard')
        user_data.tariff_name = data.get('tariff_name', 'HRlink Standard')
        user_data.documents_per_employee = data.get(
            'documents_per_employee', None)
        user_data.pages_per_document = data.get('pages_per_document', None)
        user_data.turnover_percentage = data.get('turnover_percentage', None)
        user_data.average_salary = data.get('average_salary', None)
        user_data.courier_delivery_cost = data.get(
            'courier_delivery_cost', None)
        user_data.hr_delivery_percentage = data.get(
            'hr_delivery_percentage', 0)
        user_data.timestamp = datetime.now()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    else:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        user_data = UserData(
            user_id=message.from_user.id,
            organization_name=data.get('organization_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            employee_count=data.get('employee_count', None),
            hr_specialist_count=data.get('hr_specialist_count', None),
            license_type=data.get('license_type', 'standard'),
            tariff_name=data.get('tariff_name', 'HRlink Standard'),
            documents_per_employee=data.get('documents_per_employee', None),
            pages_per_document=data.get('pages_per_document', None),
            turnover_percentage=data.get('turnover_percentage', None),
            average_salary=data.get('average_salary', None),
            courier_delivery_cost=data.get('courier_delivery_cost', None),
            hr_delivery_percentage=data.get('hr_delivery_percentage', 0),
            timestamp=datetime.now()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        )
        session.add(user_data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    session.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
    if 'hr_delivery_percentage' in data:
        # –†–∞—Å—á–µ—Ç—ã
        documents_per_year = calculate_documents_per_year(data)
        pages_per_year = calculate_pages_per_year(data)
        total_paper_costs = calculate_total_paper_costs(pages_per_year)
        total_logistics_costs = calculate_total_logistics_costs(
            data, documents_per_year)
        cost_per_minute = calculate_cost_per_minute(data)
        total_operations_costs = calculate_total_operations_costs(
            data, documents_per_year, cost_per_minute)

        # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        license_costs = session.query(LicenseCosts).first()
        total_license_costs = calculate_total_license_costs(
            data, license_costs)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data.total_paper_costs = total_paper_costs
        user_data.total_logistics_costs = total_logistics_costs
        user_data.total_operations_costs = total_operations_costs
        user_data.total_license_costs = total_license_costs
        session.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ data
        data['total_paper_costs'] = total_paper_costs
        data['total_logistics_costs'] = total_logistics_costs
        data['total_operations_costs'] = total_operations_costs
        data['total_license_costs'] = total_license_costs
        data['timestamp'] = datetime.now()  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = (
            f"<b>–ß–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {data.get(
                'employee_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–ß–∏—Å–ª–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:</b> {data.get(
                'hr_specialist_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ–¥ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {data.get(
                'documents_per_employee', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:</b> {data.get(
                'pages_per_document', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–¢–µ–∫—É—á–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:</b> {data.get(
                'turnover_percentage', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%\n"
            f"<b>–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</b> {data.get(
                'average_salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±.\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {data.get(
                'courier_delivery_cost', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Ä—É–±.\n"
            f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {data.get(
                'hr_delivery_percentage', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%\n"
            "<b>–ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> "
            f"<u>{get_tariff_name(data)}</u>\n"
        )
        await message.answer(
            f"<b>–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n{results}",
            reply_markup=get_confirmation_keyboard(),
            parse_mode=ParseMode.HTML)

    session.close()


async def contact_me(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "<b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_name)
    await state.update_data(user_id=callback_query.from_user.id)


async def process_contact_name(message: Message, state: FSMContext):
    await state.update_data(contact_name=message.text)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_phone)


async def process_contact_phone(message: Message, state: FSMContext):
    await state.update_data(contact_phone=message.text)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_email)


async def process_contact_email(message: Message, state: FSMContext):
    await state.update_data(contact_email=message.text)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.organization_name)


async def process_contact_preference(message: Message, state: FSMContext):
    await state.update_data(contact_preference=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É, "
        "—Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üíô",
        reply_markup=get_retry_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await send_contact_data(state)
    await state.clear()


async def process_organization_name(message: Message, state: FSMContext):
    await state.update_data(organization_name=message.text)
    await message.answer(
        "<b>–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É, "
        "—Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è‚ù§.</b>",
        reply_markup=get_start_keyboard(), parse_mode=ParseMode.HTML)
    await send_contact_data(state)
    await state.clear()


async def send_contact_data(state: FSMContext):
    data = await state.get_data()
    session = Session()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
    user_data_entries = session.query(UserData).filter_by(
        user_id=data['user_id']).order_by(UserData.timestamp.desc()).all()
    session.close()

    if not user_data_entries:
        await bot.send_message(
            chat_id=data['user_id'],
            text="<b>–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>",
            parse_mode=ParseMode.HTML
        )
        return

    latest_entry = user_data_entries[0]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
    comments = (
        f"<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> <u>{latest_entry.tariff_name}</u>\n"
        f"<b>–ß–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {latest_entry.employee_count}\n"
        f"<b>–ß–∏—Å–ª–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:</b> {
            latest_entry.hr_specialist_count}\n"
        f"<b>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ–¥ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {
            latest_entry.documents_per_employee}\n"
        f"<b>–°—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:</b> {latest_entry.pages_per_document}\n"
        f"<b>–¢–µ–∫—É—á–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:</b> {latest_entry.turnover_percentage}%\n"
        f"<b>–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</b> {latest_entry.average_salary} —Ä—É–±.\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {
            latest_entry.courier_delivery_cost} —Ä—É–±.\n"
        f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {
            latest_entry.hr_delivery_percentage}%\n"
        f"<b>–°—É–º–º–∞ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–∞—Ç –Ω–∞ –ö–î–ü –Ω–∞ –±—É–º–∞–≥–µ:</b> {format_number(
            latest_entry.total_paper_costs +
            latest_entry.total_logistics_costs +
            latest_entry.total_operations_costs
        ) if latest_entry.total_paper_costs is not None and latest_entry.total_logistics_costs is not None and latest_entry.total_operations_costs is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Ä—É–±.\n"
        f"<b>–°—É–º–º–∞ –ö–≠–î–û –æ—Ç HRlink:</b> {format_number(latest_entry.total_license_costs) if latest_entry.total_license_costs is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Ä—É–±.\n"
        f"<b>–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞:</b> {latest_entry.timestamp}\n"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    contact_info = (
        "<b>–ö–õ–ò–ï–ù–¢ –û–°–¢–ê–í–ò–õ –ó–ê–Ø–í–ö–£</b>\n"
        f"<b>–ò–º—è:</b> {data['contact_name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{data['contact_phone']}</code>\n"
        f"<b>Email:</b> <code>{data['contact_email']}</code>\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</b> {data['organization_name']}\n"
        f"<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> <u>{latest_entry.tariff_name}</u>\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(
        chat_id=CHAT_ID, text=contact_info,
        parse_mode=ParseMode.HTML)
    await bot.send_message(
        chat_id=CHAT_ID, text=comments,
        parse_mode=ParseMode.HTML)

    # –°–æ–∑–¥–∞–µ–º –ª–∏–¥ –≤ –ë–∏—Ç—Ä–∏–∫—Å
    await create_bitrix_lead(data, comments)


async def process_callback(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "restart":
        await restart_form(callback_query.message, state)
    elif callback_query.data == "stop":
        await stop_form(callback_query.message, state)
    elif callback_query.data == "confirm":
        await confirm_data(callback_query.message, state)


async def confirm_data(message: Message, state: FSMContext):
    data = await state.get_data()
    session = Session()

    # –†–∞—Å—á–µ—Ç—ã
    documents_per_year = calculate_documents_per_year(data)
    pages_per_year = calculate_pages_per_year(data)
    total_paper_costs = calculate_total_paper_costs(pages_per_year)
    total_logistics_costs = calculate_total_logistics_costs(
        data, documents_per_year)
    cost_per_minute = calculate_cost_per_minute(data)
    total_operations_costs = calculate_total_operations_costs(
        data, documents_per_year, cost_per_minute)

    # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    license_costs = session.query(LicenseCosts).first()
    total_license_costs = calculate_total_license_costs(data, license_costs)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_text1 = (
        "<b>–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´ –ü–û –í–í–ï–î–ï–ù–ù–´–ú –î–ê–ù–ù–´–ú</b>\n"
        "\n"
        f"<b>–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –±—É–º–∞–∂–Ω–æ–µ –ö–î–ü: {format_number(
            total_paper_costs + total_logistics_costs + total_operations_costs
            )}</b> —Ä—É–±–ª–µ–π –≤ –≥–æ–¥\n"
        "\n"
        f"–ü–µ—á–∞—Ç—å –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{format_number(
            total_paper_costs
            )}</b> —Ä—É–±–ª–µ–π –≤ –≥–æ–¥\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{format_number(
            total_logistics_costs
            )}</b> —Ä—É–±–ª–µ–π –≤ –≥–æ–¥\n"
        "–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–¥—Ä–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ "
        f"–æ–Ω —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏: <b>{
            format_number(total_operations_costs)}</b> —Ä—É–±–ª–µ–π –≤ –≥–æ–¥\n"
        "\n"
    )

    user_text2 = (
        f"–í–Ω–µ–¥—Ä–∏–≤ –ö–≠–î–û –æ—Ç HRlink, –≤—ã <b>—Å–º–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å: {format_number(total_paper_costs + total_logistics_costs + total_operations_costs - total_license_costs)}</b> —Ä—É–±–ª–µ–π –≤ –≥–æ–¥.\n"
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å HRlink –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:</b> –æ—Ç {format_number(total_license_costs)} —Ä—É–±–ª–µ–π –≤ –≥–æ–¥.\n"
        f"<b>–¶–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> –æ—Ç {data.get('employee_license_cost', 700)} —Ä—É–±–ª–µ–π –≤ –≥–æ–¥.\n"
        "\n"
        "–¢–æ—á–Ω–∞—è —Ü–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "\n"
        "‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å —É—á–µ—Ç–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ;\n"
        "‚Äî –Ω–∞–π–º –∏ —Ä–∞–±–æ—Ç—É —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º–∏ –∏ –ø–æ –ì–ü–•;\n"
        "‚Äî –ª–µ–≥–∏—Ç–∏–º–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤;\n"
        "‚Äî —É–¥–æ–±–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞;\n"
        "‚Äî –≥–∏–±–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã;\n"
        "‚Äî –≤—Å–µ –≤–∏–¥—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π.\n"
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    graph_path = generate_cost_graph(
        total_paper_costs,
        total_logistics_costs,
        total_operations_costs,
        total_license_costs
        )
    await message.answer_photo(FSInputFile(graph_path))

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    os.remove(graph_path)

    # –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
    await message.answer(user_text1, parse_mode=ParseMode.HTML)
    await message.answer(user_text2, parse_mode=ParseMode.HTML)

    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ <b>–∑–∞—è–≤–∫—É</b>, –∏ –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö "
        "–ö–≠–î–û-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã HRlink, –ø–æ–º–æ–∂–µ–º –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ "
        "–ø–µ—Ä–µ–¥ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
        reply_markup=get_contact_keyboard(),
        parse_mode=ParseMode.HTML
    )

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    session.close()


async def echo(message: Message):
    user_text = (
        '–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ\n'
        '–ï—Å–ª–∏ –í—ã –≤–≤–æ–¥–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É, —Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n'
        '–ï—Å–ª–∏ –í—ã –≤–≤–æ–¥–∏–ª–∏ —á–∏—Å–ª–æ, –ø–æ—Ç–æ–≤—Ä–∏—Ç–µ, —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!'
    )
    await message.answer(
        user_text, reply_markup=get_start_keyboard(),
        parse_mode=ParseMode.HTML)


async def create_bitrix_lead(data, comments):
    bitrix_webhook_url = (
        "https://b24.hrlk.ru/rest/7414/d6bo0kujd1cm2owi/crm.lead.add.json"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    email = data.get("contact_email", "").strip()
    if not is_valid_email(email):
        email = ""  # –ï—Å–ª–∏ email –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–∞
    lead_data = {
        "fields": {
            "TITLE": "–õ–∏–¥ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ –±–æ—Ç–µ",
            "NAME": data.get("contact_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "PHONE": [{"VALUE": data.get("contact_phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), "VALUE_TYPE": "WORK"}],
            "EMAIL": [{"VALUE": email, "VALUE_TYPE": "WORK"}] if email else [],  # –ü–µ—Ä–µ–¥–∞–µ–º email, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
            "COMMENTS": comments,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            "SOURCE_ID": "32",  # –¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç / –ø—Ä–æ–¥—É–∫—Ç
            "SOURCE_DESCRIPTION": "–¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç / –ø—Ä–æ–¥—É–∫—Ç"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        }
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(bitrix_webhook_url, json=lead_data) as response:
                if response.status == 200:
                    response_data = await response.json()
                    if response_data.get("result"):
                        print("–õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å24")
                    else:
                        print(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: {response_data.get('error_description')}"
                        )
                else:
                    print(f"–û—à–∏–±–∫–∞ HTTP: {response.status}")
                    print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {await response.text()}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")


def format_number(value):
    return "{:,.0f}".format(value).replace(',', ' ')


def is_valid_email(email):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ email –≤–∞–ª–∏–¥–Ω—ã–º.
    """
    if not email:
        return False
    email_regex = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    return re.match(email_regex, email) is not None


def get_tariff_name(data):
    license_type = data.get('license_type', 'standard')
    if license_type == 'lite':
        return "HRlink Lite"
    elif license_type == 'standard':
        return "HRlink Standard"
    elif license_type == 'enterprise':
        return "HRlink Enterprise"
    else:
        return "HRlink Standard"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é—ã
