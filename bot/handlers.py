from aiogram import Dispatcher, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types.input_file import FSInputFile
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import UserData, LicenseCosts
from states import Form
from keyboards import (
    get_keyboard, get_start_keyboard,
    get_contact_keyboard, get_license_type_keyboard, get_confirmation_keyboard
)
from calculations import (
    calculate_documents_per_year, calculate_pages_per_year,
    calculate_total_paper_costs, calculate_total_logistics_costs,
    calculate_cost_per_minute, calculate_total_operations_costs,
    calculate_total_license_costs
)
from decouple import Config, RepositoryEnv
from graph import generate_cost_graph
import os
import logging
import re

config = Config(RepositoryEnv('.env'))
BOT_TOKEN = config('BOT_TOKEN')
CHAT_ID = config('CHAT_ID')
bot = Bot(token=BOT_TOKEN)

engine = create_engine('sqlite:///user_data.db')
Session = sessionmaker(bind=engine)


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, CommandStart())
    dp.callback_query.register(start_form, lambda c: c.data == "start_form")
    dp.message.register(
        restart_form, lambda message: message.text.lower() == '–∑–∞–Ω–æ–≤–æ')
    dp.message.register(
        stop_form, lambda message: message.text.lower() == '—Å—Ç–æ–ø')
    dp.callback_query.register(
        process_license_type, lambda c: c.data in [
            "simple_kedo", "standard_kedo"
            ])
    dp.message.register(process_hr_specialist_count, Form.hr_specialist_count)
    dp.message.register(process_organization_name, Form.organization_name)
    dp.message.register(process_employee_count, Form.employee_count)
    dp.message.register(
        process_documents_per_employee, Form.documents_per_employee)
    dp.message.register(process_pages_per_document, Form.pages_per_document)
    dp.message.register(process_turnover_percentage, Form.turnover_percentage)
    dp.message.register(process_average_salary, Form.average_salary)
    dp.message.register(
        process_courier_delivery_cost, Form.courier_delivery_cost)
    dp.message.register(
        process_hr_delivery_percentage, Form.hr_delivery_percentage)
    dp.callback_query.register(contact_me, lambda c: c.data == "contact_me")
    dp.message.register(process_contact_name, Form.contact_name)
    dp.message.register(process_organization_inn, Form.organization_inn)
    dp.message.register(process_contact_phone, Form.contact_phone)
    dp.message.register(process_contact_email, Form.contact_email)
    dp.message.register(process_contact_preference, Form.contact_preference)
    dp.message.register(echo)
    dp.callback_query.register(
        process_callback, lambda c: c.data in ["restart", "stop", "confirm"])


async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–¥–∞–Ω–æ"

    session = Session()
    user_exists = session.query(UserData).filter_by(user_id=user_id).first()
    session.close()

    if not user_exists:
        try:
            await send_new_user_notification(user_id, username)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    user_text = (
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n'
        '–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ <b>–≤—ã–≥–æ–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ö–≠–î–û</b> üí∞\n'
        '–í–∞–º –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–∫—É—â–∏–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º –ö–î–ü. üëÄ\n'
        '–ê –±–æ—Ç –Ω–∞–≥–ª—è–¥–Ω–æ –ø–æ–∫–∞–∂–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –±—É–º–∞–≥–æ–π –∏ –ö–≠–î–û \n'
        '–ö–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–ü—Ä–∏—Å—Ç—É–ø–∏—Å—Ç—å –∫ —Ä–∞—Å—á—ë—Ç–∞–º"</b>. üëá'
    )
    await message.answer(
        text=user_text, reply_markup=get_start_keyboard(),
        parse_mode=ParseMode.HTML)


async def start_form(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.</b>",
        reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
    await state.set_state(Form.employee_count)
    await state.update_data(user_id=callback_query.from_user.id)


async def restart_form(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.</b>",
        reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
    await state.set_state(Form.employee_count)
    await state.update_data(user_id=message.from_user.id)


async def stop_form(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."
        "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç–æ–≤."
        )


async def process_license_type(
        callback_query: CallbackQuery, state: FSMContext):
    license_type = "lite" if callback_query.data == "simple_kedo" else "standard"
    await state.update_data(license_type=license_type)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    data = await state.get_data()
    employee_count = data.get("employee_count", 0)

    if license_type == "lite":
        if 0 < employee_count < 500:
            employee_license_cost = 500
            tariff_name = "HRlink Lite"
        elif 500 <= employee_count <= 1999:
            employee_license_cost = 700
            tariff_name = "HRlink Lite"
        else:
            employee_license_cost = 700
            tariff_name = "HRlink Enterprise"
    elif license_type == "standard":
        if 0 < employee_count <= 1999:
            employee_license_cost = 700
            tariff_name = "HRlink Standard"
        else:
            employee_license_cost = 700
            tariff_name = "HRlink Enterprise"
    else:
        employee_license_cost = 700
        tariff_name = "HRlink Standard"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    await state.update_data(employee_license_cost=employee_license_cost)
    await state.update_data(tariff_name=tariff_name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞

    await callback_query.message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –æ–¥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ–¥?\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ 30 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–æ –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.",
        reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
    await state.set_state(Form.documents_per_employee)
    await state.update_data(user_id=callback_query.from_user.id)


async def process_hr_specialist_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>",
            reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
        return
    await state.update_data(hr_specialist_count=int(message.text))
    await message.answer(
        "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ö–≠–î–û –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç:\n"
        "\n"
        "<b>–î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>\n"
        "- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ¬´1–°:–ó–£–ü¬ª –∏ ¬´1–°:–§—Ä–µ—à¬ª;\n"
        "- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ø–æ—á—Ç—É;\n"
        "- –æ–±–ª–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ;\n"
        "- —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã.\n"
        "\n"
        "<b>–î–ª—è –∫–∞–¥—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –Ω–µ—Ç–∏–ø–æ–≤—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏</b> "
        "<b>–∏ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:</b>\n"
        "- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ¬´1–°¬ª, ¬´–ë–∏—Ç—Ä–∏–∫—Å24¬ª, ¬´–ë–û–°–°-–ö–∞–¥—Ä–æ–≤–∏–∫¬ª, SAP;\n"
        "- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram, –ø–æ—á—Ç—É –∏ –°–ú–°;\n"
        "- –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è;\n"
        "- —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ;\n"
        "- –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.\n"
        "\n"
        "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è.</b>",
        reply_markup=get_license_type_keyboard(), parse_mode=ParseMode.HTML)
    await state.set_state(Form.license_type)
    await state.update_data(user_id=message.from_user.id)


async def process_employee_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>",
            reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
        return
    await state.update_data(employee_count=int(message.text))
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ <b>–∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.</b>",
        reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
    await state.set_state(Form.hr_specialist_count)
    await state.update_data(user_id=message.from_user.id)


async def process_documents_per_employee(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        if value <= 0:
            raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_keyboard()
        )
        return

    await state.update_data(documents_per_employee=int(value))
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ?\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ 1.5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
        "<b>–î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É.</b>",
        reply_markup=get_keyboard(), parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.pages_per_document)
    await state.update_data(user_id=message.from_user.id)


async def process_pages_per_document(message: Message, state: FSMContext):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∑–∞–ø—è—Ç—É—é
        value = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ c —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π.</b>",
            reply_markup=get_keyboard(), parse_mode=ParseMode.HTML
        )
        return

    await state.update_data(pages_per_document=value)
    await message.answer(
        "–ö–∞–∫–∞—è –≤ –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ <b>—Ç–µ–∫—É—á–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö?</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∑–Ω–∞–∫ <b>%</b> —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.",
        reply_markup=get_keyboard(), parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.turnover_percentage)
    await state.update_data(user_id=message.from_user.id)


async def process_turnover_percentage(message: Message, state: FSMContext):
    try:
        value = float(message.text.replace('%', '').strip())
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
        return
    await state.update_data(turnover_percentage=value)
    await message.answer(
        "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–¥–µ–ª–∞ –∫–∞–¥—Ä–æ–≤ "
        "—Å —É—á–µ—Ç–æ–º –ù–î–§–õ –∏ –Ω–∞–ª–æ–≥–æ–≤ –≤ –º–µ—Å—è—Ü (—Ä—É–±.)?\n"
        "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ <b>–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏,</b> "
        "–∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –û–ö —Ç—Ä–∞—Ç—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –±—É–º–∞–∂–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, "
        "–≤–º–µ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π. –≠—Ç–∏ <b>—Ç—Ä–∞—Ç—ã</b> "
        "<b>–º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å</b>, –ø–µ—Ä–µ–π–¥—è –Ω–∞ –ö–≠–î–û.",
        reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
    await state.set_state(Form.average_salary)
    await state.update_data(user_id=message.from_user.id)


async def process_average_salary(message: Message, state: FSMContext):
    try:
        value = float(message.text)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
        return
    await state.update_data(average_salary=value)
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–¥–Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤? "
        "–£–∫–∞–∂–∏—Ç–µ 0 –µ—Å–ª–∏ –Ω–µ—Ç –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.",
        reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
    await state.set_state(Form.courier_delivery_cost)
    await state.update_data(user_id=message.from_user.id)


async def process_courier_delivery_cost(message: Message, state: FSMContext):
    try:
        value = float(message.text)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
        return

    await state.update_data(courier_delivery_cost=value)

    if value > 0:
        await message.answer(
            "–ö–∞–∫–æ–π % –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –¥–æ—Å—Ç–∞–≤–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç "
            "–∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫—É—Ä—å–µ—Ä–æ–º?",
            reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
        await state.set_state(Form.hr_delivery_percentage)
    else:
        # –ï—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–Ω–∞ 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ—Ü–µ–Ω—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await state.update_data(hr_delivery_percentage=0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await save_data(message, state, bot)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

    await state.update_data(user_id=message.from_user.id)


async def process_hr_delivery_percentage(message: Message, state: FSMContext):
    try:
        value = float(message.text.replace('%', '').strip())
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_keyboard(), parse_mode=ParseMode.HTML)
        return
    await state.update_data(hr_delivery_percentage=value)
    await state.update_data(user_id=message.from_user.id)

    # –í—ã–∑—ã–≤–∞–µ–º save_data —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    await save_data(message, state, bot)


async def save_data(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    session = Session()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ user_id
    user_data_entries = session.query(UserData).filter_by(
        user_id=message.from_user.id).all()
    if len(user_data_entries) >= 5:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
        oldest_entry = session.query(UserData).filter_by(
            user_id=message.from_user.id).order_by(
                UserData.timestamp.asc()).first()
        session.delete(oldest_entry)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è organization_name
    organization_name = data.get('organization_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    user_data = UserData(
        user_id=message.from_user.id,
        organization_name=organization_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        employee_count=data['employee_count'],
        hr_specialist_count=data['hr_specialist_count'],
        license_type=data.get('license_type', 'standard'),
        documents_per_employee=data['documents_per_employee'],
        pages_per_document=data['pages_per_document'],
        turnover_percentage=data['turnover_percentage'],
        average_salary=data['average_salary'],
        courier_delivery_cost=data['courier_delivery_cost'],
        hr_delivery_percentage=data.get('hr_delivery_percentage', 0)
    )

    session.add(user_data)
    session.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
    if 'hr_delivery_percentage' in data:
        # –†–∞—Å—á–µ—Ç—ã
        documents_per_year = calculate_documents_per_year(data)
        pages_per_year = calculate_pages_per_year(data)
        total_paper_costs = calculate_total_paper_costs(pages_per_year)
        total_logistics_costs = calculate_total_logistics_costs(
            data, documents_per_year)
        cost_per_minute = calculate_cost_per_minute(data)
        total_operations_costs = calculate_total_operations_costs(
            data, documents_per_year, cost_per_minute)

        # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        license_costs = session.query(LicenseCosts).first()
        total_license_costs = calculate_total_license_costs(data, license_costs)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data.total_paper_costs = total_paper_costs
        user_data.total_logistics_costs = total_logistics_costs
        user_data.total_operations_costs = total_operations_costs
        user_data.total_license_costs = total_license_costs
        session.commit()

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = (
            f"<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> <u>{data.get('tariff_name', 'standard')}</u>\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º tariff_name
            f"<b>–ß–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {data['employee_count']}\n"
            f"<b>–ß–∏—Å–ª–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:</b> {data['hr_specialist_count']}\n"
            f"<b>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ–¥ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {
                data['documents_per_employee']}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:</b> {data['pages_per_document']}\n"
            f"<b>–¢–µ–∫—É—á–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:</b> {data['turnover_percentage']}%\n"
            f"<b>–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</b> {data['average_salary']} —Ä—É–±.\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {
                data['courier_delivery_cost']} —Ä—É–±.\n"
            f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {
                data.get('hr_delivery_percentage', 0)}%\n"
        )
        await message.answer(
            f"<b>–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n{results}",
            reply_markup=get_confirmation_keyboard(),
            parse_mode=ParseMode.HTML)
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –ø–æ–ª–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        session.commit()

    session.close()


async def contact_me(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –ò–ù–ù –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.organization_inn)
    await state.update_data(user_id=callback_query.from_user.id)


async def process_organization_inn(message: Message, state: FSMContext):
    inn = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ INN
    if not re.match(r'^\d{10}$|^\d{12}$', inn):
        await message.answer(
            "<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù (10 —Ü–∏—Ñ—Ä –¥–ª—è –û–û–û –∏–ª–∏ 12 —Ü–∏—Ñ—Ä –¥–ª—è –ò–ü).",
            parse_mode=ParseMode.HTML)
        return

    await state.update_data(organization_inn=inn)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.organization_name)
    await state.update_data(user_id=message.from_user.id)


async def process_organization_name(message: Message, state: FSMContext):
    await state.update_data(organization_name=message.text)
    await message.answer(
        "<b>–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_name)
    await state.update_data(user_id=message.from_user.id)


async def process_contact_name(message: Message, state: FSMContext):
    await state.update_data(contact_name=message.text)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_phone)
    await state.update_data(user_id=message.from_user.id)


async def process_contact_phone(message: Message, state: FSMContext):
    await state.update_data(contact_phone=message.text)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_email)
    await state.update_data(user_id=message.from_user.id)


async def process_contact_email(message: Message, state: FSMContext):
    await state.update_data(contact_email=message.text)
    await message.answer(
        "<b>–ö–∞–∫–æ–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? –ü–æ—á—Ç–∞, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä, –∑–≤–æ–Ω–æ–∫.</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_preference)
    await state.update_data(user_id=message.from_user.id)


async def process_contact_preference(message: Message, state: FSMContext):
    await state.update_data(contact_preference=message.text)
    await message.answer(
        "<b>–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É, "
        "—Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è‚ù§.</b>",
        reply_markup=get_start_keyboard(), parse_mode=ParseMode.HTML)
    await send_contact_data(state)
    await state.clear()


async def send_contact_data(state: FSMContext):
    data = await state.get_data()
    if 'user_id' not in data:
        raise KeyError("user_id is missing in state data")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    required_fields = [
        'contact_name', 'organization_inn', 'contact_phone',
        'contact_email', 'contact_preference', 'organization_name'
    ]
    missing_fields = [field for field in required_fields if field not in data]

    if missing_fields:
        # –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        missing_fields_text = ", ".join(missing_fields)
        await bot.send_message(
            chat_id=data['user_id'],
            text=f"<b>–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:</b> {missing_fields_text}.\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è, —á—Ç–æ–±—ã "
                 "–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫.",
            parse_mode=ParseMode.HTML
        )
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session()
    user_data_entries = session.query(UserData).filter_by(
        user_id=data['user_id']).order_by(UserData.timestamp.desc()).all()
    session.close()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if user_data_entries:
        latest_entry = user_data_entries[0]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
        user_data_info = (
            f"<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> <u>{latest_entry.license_type}</u>\n"
            f"<b>–ß–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {latest_entry.employee_count}\n"
            f"<b>–ß–∏—Å–ª–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:</b> {
                latest_entry.hr_specialist_count}\n"
            f"<b>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ–¥ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {
                latest_entry.documents_per_employee}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:</b> {latest_entry.pages_per_document}\n"
            f"<b>–¢–µ–∫—É—á–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:</b> {
                latest_entry.turnover_percentage}%\n"
            f"<b>–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</b> {latest_entry.average_salary} —Ä—É–±.\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {
                latest_entry.courier_delivery_cost} —Ä—É–±.\n"
            f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {
                latest_entry.hr_delivery_percentage}%\n"
            f"<b>–°—É–º–º–∞ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–∞—Ç –Ω–∞ –ö–î–ü –Ω–∞ –±—É–º–∞–≥–µ:</b> {
                format_number(
                    latest_entry.total_paper_costs + latest_entry.total_logistics_costs +
                    latest_entry.total_operations_costs
                    ) if latest_entry.total_paper_costs is not None and latest_entry.total_logistics_costs is not None and latest_entry.total_operations_costs is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Ä—É–±.\n"
            f"<b>–°—É–º–º–∞ –ö–≠–î–û –æ—Ç HRlink:</b> {
                format_number(
                    latest_entry.total_license_costs
                    ) if latest_entry.total_license_costs is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Ä—É–±.\n"
            f"<b>–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞:</b> {latest_entry.timestamp}\n"
        )
    else:
        user_data_info = "<b>–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    contact_info = (
        "<b>–ö–õ–ò–ï–ù–¢ –û–°–¢–ê–í–ò–õ –ó–ê–Ø–í–ö–£</b>\n"
        f"<b>–ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b> <code>{data['organization_inn']}</code>\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b> {data['organization_name']}\n"
        f"<b>–ò–º—è:</b> {data['contact_name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>+{data['contact_phone']}</code>\n"
        f"<b>Email:</b> <code>{data['contact_email']}</code>\n"
        f"<b>–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —Å–≤—è–∑–∏:</b> {data['contact_preference']}\n"
        f"<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> <u>{data.get('tariff_name', 'HRlink Standard')}</u>\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º tariff_name
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    await bot.send_message(
        chat_id=CHAT_ID, text=contact_info,
        parse_mode=ParseMode.HTML)
    await bot.send_message(
        chat_id=CHAT_ID, text=user_data_info,
        parse_mode=ParseMode.HTML)


async def process_callback(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "restart":
        await restart_form(callback_query.message, state)
    elif callback_query.data == "stop":
        await stop_form(callback_query.message, state)
    elif callback_query.data == "confirm":
        await confirm_data(callback_query.message, state)


async def confirm_data(message: Message, state: FSMContext):
    data = await state.get_data()
    session = Session()

    # –†–∞—Å—á–µ—Ç—ã
    documents_per_year = calculate_documents_per_year(data)
    pages_per_year = calculate_pages_per_year(data)
    total_paper_costs = calculate_total_paper_costs(pages_per_year)
    total_logistics_costs = calculate_total_logistics_costs(
        data, documents_per_year)
    cost_per_minute = calculate_cost_per_minute(data)
    total_operations_costs = calculate_total_operations_costs(
        data, documents_per_year, cost_per_minute)

    # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    license_costs = session.query(LicenseCosts).first()
    total_license_costs = calculate_total_license_costs(data, license_costs)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    user_text = (
        "<b>–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´ –ü–û –í–í–ï–î–ï–ù–ù–´–ú –î–ê–ù–ù–´–ú</b>\n"
        "\n"
        f"–†–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{
            format_number(total_paper_costs)}</b> —Ä—É–±.\n"
        f"–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{
            format_number(total_logistics_costs)}</b> —Ä—É–±.\n"
        f"–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏: <b>{
            format_number(total_operations_costs)}</b> —Ä—É–±.\n"
        "\n"
        f"<b>–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–∏ –ö–î–ü –Ω–∞ –±—É–º–∞–≥–µ: {
            format_number(
                total_paper_costs + total_logistics_costs +
                total_operations_costs
                )
                }</b> —Ä—É–±.\n"
        "\n"
        f"<u><b>–°—É–º–º–∞ –ö–≠–î–û –æ—Ç HRlink: {format_number(total_license_costs)}</b></u> —Ä—É–±. \n"
        "–í —ç—Ç—É —Å—É–º–º—É –≤—Ö–æ–¥–∏—Ç: \n"
        "<b>–ë–∞–∑–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è</b> (—Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ) \n"
        "<b>–õ–∏—Ü–µ–Ω–∑–∏—è –ö–∞–¥—Ä–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞(–æ–≤)</b> \n"
        "<b>–õ–∏—Ü–µ–Ω–∑–∏–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b> (–° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é "
        "–≤—ã–ø—É—Å—Ç–∏—Ç—å <b>–£–ù–≠–ü</b>, —Ç–∞–∫ –∂–µ –≤ –ª–∏—Ü–µ–Ω–∑–∏—é –≤—Ö–æ–¥–∏—Ç <b>5 –°–ú–°</b>)\n"
        "\n"
        "<u><i>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –ö–≠–î–û –æ—Ç HRlink –≤ –º–µ—Å—è—Ü –æ—Ç:</i></u> "
        f"<b>{format_number(total_license_costs / 12)}</b>—Ä—É–±.\n"
        "\n"
        f"–°—É–º–º–∞ –≤—ã–≥–æ–¥—ã: <b>{
            format_number(
                total_paper_costs + total_logistics_costs +
                total_operations_costs - total_license_costs)}</b> —Ä—É–±. "
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –∏ —Ü–µ–Ω–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    tariff_name = data.get("tariff_name", "HRlink Standard")
    employee_license_cost = data.get("employee_license_cost", 700)
    user_text += (
        f"\n\n<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∞—Ä–∏—Ñ:</b> {tariff_name}\n"
        f"<b>–¶–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç:</b> {employee_license_cost} —Ä—É–±."
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    graph_path = generate_cost_graph(
        total_paper_costs, total_logistics_costs,
        total_operations_costs, total_license_costs
    )
    await message.answer_photo(FSInputFile(graph_path))

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    os.remove(graph_path)

    # –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
    await message.answer(user_text, parse_mode=ParseMode.HTML)

    await message.answer(
        '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ <b>–¢–≠–û</b> '
        '(–¢–µ—Ö–Ω–∏–∫–æ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ), '
        '–æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, '
        '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ '
        '–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è –≤ –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        reply_markup=get_contact_keyboard(),
        parse_mode=ParseMode.HTML
    )

    await state.clear()
    session.close()


async def echo(message: Message):
    user_text = (
        '–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ\n'
        '–ï—Å–ª–∏ –í—ã –≤–≤–æ–¥–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É, —Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n'
        '–ï—Å–ª–∏ –í—ã –≤–≤–æ–¥–∏–ª–∏ —á–∏—Å–ª–æ, –ø–æ—Ç–æ–≤—Ä–∏—Ç–µ, —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!'
    )
    await message.answer(
        user_text, reply_markup=get_start_keyboard(),
        parse_mode=ParseMode.HTML)


async def send_new_user_notification(user_id: int, username: str):
    notification_text = (
        f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        f"ID: {user_id}\n"
        f"Username: {username}"
    )
    await bot.send_message(chat_id=CHAT_ID, text=notification_text)


def format_number(value):
    return "{:,.0f}".format(value).replace(',', ' ')