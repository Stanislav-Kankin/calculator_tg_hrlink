from aiogram import Dispatcher, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types.input_file import FSInputFile
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import UserData, LicenseCosts
from states import Form
from keyboards import (
    get_keyboard, get_start_keyboard,
    get_contact_keyboard, get_license_type_keyboard, get_confirmation_keyboard,
    get_retry_keyboard
)
from calculations import (
    calculate_documents_per_year, calculate_pages_per_year,
    calculate_total_paper_costs, calculate_total_logistics_costs,
    calculate_cost_per_minute, calculate_total_operations_costs,
    calculate_total_license_costs
)
from decouple import Config, RepositoryEnv
from graph import generate_cost_graph
import os
import logging
import re

config = Config(RepositoryEnv('.env'))
BOT_TOKEN = config('BOT_TOKEN')
CHAT_ID = config('CHAT_ID')
bot = Bot(token=BOT_TOKEN)

engine = create_engine('sqlite:///user_data.db')
Session = sessionmaker(bind=engine)


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, CommandStart())
    dp.callback_query.register(start_form, lambda c: c.data == "start_form")
    dp.message.register(
        restart_form, lambda message: message.text.lower() == '–∑–∞–Ω–æ–≤–æ')
    dp.message.register(
        stop_form, lambda message: message.text.lower() == '—Å—Ç–æ–ø')
    dp.callback_query.register(
        process_license_type, lambda c: c.data in [
            "simple_kedo", "standard_kedo"
            ])
    dp.message.register(process_hr_specialist_count, Form.hr_specialist_count)
    dp.message.register(process_organization_name, Form.organization_name)
    dp.message.register(process_employee_count, Form.employee_count)
    dp.message.register(
        process_documents_per_employee, Form.documents_per_employee)
    dp.message.register(process_pages_per_document, Form.pages_per_document)
    dp.message.register(process_turnover_percentage, Form.turnover_percentage)
    dp.message.register(process_average_salary, Form.average_salary)
    dp.message.register(
        process_courier_delivery_cost, Form.courier_delivery_cost)
    dp.message.register(
        process_hr_delivery_percentage, Form.hr_delivery_percentage)
    dp.callback_query.register(contact_me, lambda c: c.data == "contact_me")
    dp.message.register(process_contact_name, Form.contact_name)
    dp.message.register(process_contact_phone, Form.contact_phone)
    dp.message.register(process_contact_email, Form.contact_email)
    dp.message.register(process_contact_preference, Form.contact_preference)
    dp.message.register(echo)
    dp.callback_query.register(
        process_callback, lambda c: c.data in ["restart", "stop", "confirm"])


async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–¥–∞–Ω–æ"

    session = Session()
    user_exists = session.query(UserData).filter_by(user_id=user_id).first()
    session.close()

    if not user_exists:
        try:
            await send_new_user_notification(user_id, username)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    user_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≤—ã–≥–æ–¥—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ö–≠–î–û üí∞\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ö–î–ü –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, "
        "–∏ –±–æ—Ç –ø–æ—Å—á–∏—Ç–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –±—É–º–∞–∂–Ω—ã–º –∏ "
        "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –∫–∞–¥—Ä–æ–≤—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–æ–º."
    )
    await message.answer(
        text=user_text, reply_markup=get_start_keyboard(),
        parse_mode=ParseMode.HTML)


async def start_form(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "<b>–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.employee_count)
    await state.update_data(user_id=callback_query.from_user.id)


async def restart_form(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.employee_count)
    await state.update_data(user_id=message.from_user.id)


async def stop_form(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª–∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."
        "–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç–æ–≤."
        )


async def process_employee_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>",
            parse_mode=ParseMode.HTML)
        return

    employee_count = int(message.text)
    await state.update_data(employee_count=employee_count)

    if 0 < employee_count <= 499:
        await message.answer(
            "–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ö–≠–î–û –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç:\n"
            "\n"
            "<b><u>HRlink Lite</u> - –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫–∞–¥—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b>\n"
            "- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ¬´1–°:–ó–£–ü¬ª –∏ ¬´1–°:–§—Ä–µ—à¬ª;\n"
            "- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ø–æ—á—Ç—É;\n"
            "- –æ–±–ª–∞—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ;\n"
            "- —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ª—É–∂–±—É –∑–∞–±–æ—Ç—ã.\n"
            "\n"
            "<b><u>HRlink Standard</u> - –¥–ª—è –∫–∞–¥—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ </b>"
            "<b>—Å –Ω–µ—Ç–∏–ø–æ–≤—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏</b> "
            "<b>–∏ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:</b>\n"
            "- –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ¬´1–°¬ª, ¬´–ë–∏—Ç—Ä–∏–∫—Å24¬ª, ¬´–ë–û–°–°-–ö–∞–¥—Ä–æ–≤–∏–∫¬ª, SAP;\n"
            "- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram, –ø–æ—á—Ç—É –∏ –°–ú–°;\n"
            "- –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è;\n"
            "- —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ;\n"
            "- –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.\n"
            "\n"
            "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è.</b>",
            reply_markup=get_license_type_keyboard(),
            parse_mode=ParseMode.HTML)
        await state.set_state(Form.license_type)
    elif 500 <= employee_count <= 1999:
        await state.update_data(
            license_type="standard", employee_license_cost=700)
        await message.answer(
            "<b>–°–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
            parse_mode=ParseMode.HTML)
        await state.set_state(Form.hr_specialist_count)
    elif employee_count >= 2000:
        await state.update_data(
            license_type="enterprise", employee_license_cost=600)
        await message.answer(
            "<b>–°–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
            parse_mode=ParseMode.HTML)
        await state.set_state(Form.hr_specialist_count)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
            parse_mode=ParseMode.HTML)


async def process_license_type(
        callback_query: CallbackQuery, state: FSMContext):
    license_type = "lite" if callback_query.data == "simple_kedo" else "standard"
    await state.update_data(license_type=license_type)

    if license_type == "lite":
        employee_license_cost = 500
        tariff_name = "HRlink Lite"
    else:
        employee_license_cost = 700
        tariff_name = "HRlink Standard"

    await state.update_data(employee_license_cost=employee_license_cost)
    await state.update_data(tariff_name=tariff_name)

    await callback_query.message.answer(
        "<b>–°–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.hr_specialist_count)


async def process_hr_specialist_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.</b>",
            parse_mode=ParseMode.HTML)
        return
    await state.update_data(hr_specialist_count=int(message.text))
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞ –≥–æ–¥?\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ –æ–∫–æ–ª–æ 30 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
        "–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.documents_per_employee)


async def process_documents_per_employee(message: Message, state: FSMContext):
    try:
        value = float(message.text)
        if value <= 0:
            raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
        )
        return

    await state.update_data(documents_per_employee=int(value))
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–∞–∂–¥–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ?\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ 1,5 —Å—Ç—Ä–∞–Ω–∏—Ü—ã.  –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ, "
        "–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.pages_per_document)


async def process_pages_per_document(message: Message, state: FSMContext):
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∑–∞–ø—è—Ç—É—é
        value = float(message.text.replace(',', '.'))
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ c —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π.</b>",
            parse_mode=ParseMode.HTML
        )
        return

    await state.update_data(pages_per_document=value)
    await message.answer(
        "–ö–∞–∫–æ–π <b>–ø—Ä–æ—Ü–µ–Ω—Ç —Ç–µ–∫—É—á–∫–∏</b> –≤ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏?\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∑–Ω–∞–∫ ¬´%¬ª —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(Form.turnover_percentage)


async def process_turnover_percentage(message: Message, state: FSMContext):
    try:
        value = float(message.text.replace('%', '').strip())
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.HTML)
        return
    await state.update_data(turnover_percentage=value)
    await message.answer(
        "–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ "
        "–æ—Ç–¥–µ–ª–∞ –∫–∞–¥—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–æ–≤?\n"
        "\n"
        "–î–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã <b>–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏</b>, "
        "–∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–¥–µ–ª–∞ –∫–∞–¥—Ä–æ–≤ —Ç—Ä–∞—Ç—è—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É "
        "—Å –±—É–º–∞–∂–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –∏ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ "
        "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤–Ω–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å "
        "—ç—Ç–æ –≤—Ä–µ–º—è –∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è "
        "–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á.\n"
        "–í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.average_salary)


async def process_average_salary(message: Message, state: FSMContext):
    try:
        value = float(message.text)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.HTML)
        return
    await state.update_data(average_salary=value)
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º —Å—Ç–æ–∏—Ç –æ–¥–Ω–∞ –∫—É—Ä—å–µ—Ä—Å–∫–∞—è "
        "–¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?\n"
        "–í–≤–µ–¥–∏—Ç–µ 0, –µ—Å–ª–∏ –Ω–µ—Ç –∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.courier_delivery_cost)


async def process_courier_delivery_cost(message: Message, state: FSMContext):
    try:
        value = float(message.text)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.HTML)
        return

    await state.update_data(courier_delivery_cost=value)

    if value > 0:
        await message.answer(
            "–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ "
            "–∫—É—Ä—å–µ—Ä—Å–∫–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤?\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∑–Ω–∞–∫ ¬´%¬ª —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.",
            parse_mode=ParseMode.HTML)
        await state.set_state(Form.hr_delivery_percentage)
    else:
        # –ï—Å–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–Ω–∞ 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ—Ü–µ–Ω—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        await state.update_data(hr_delivery_percentage=0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await save_data(message, state, bot)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ


async def process_hr_delivery_percentage(message: Message, state: FSMContext):
    try:
        value = float(message.text.replace('%', '').strip())
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            parse_mode=ParseMode.HTML)
        return
    await state.update_data(hr_delivery_percentage=value)
    await state.update_data(user_id=message.from_user.id)

    # –í—ã–∑—ã–≤–∞–µ–º save_data —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    await save_data(message, state, bot)


async def save_data(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    session = Session()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ user_id
    user_data_entries = session.query(UserData).filter_by(
        user_id=message.from_user.id).all()
    if len(user_data_entries) >= 5:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
        oldest_entry = session.query(UserData).filter_by(
            user_id=message.from_user.id).order_by(
                UserData.timestamp.asc()).first()
        session.delete(oldest_entry)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è organization_name
    organization_name = data.get('organization_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

    user_data = UserData(
        user_id=message.from_user.id,
        organization_name=organization_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        employee_count=data['employee_count'],
        hr_specialist_count=data['hr_specialist_count'],
        license_type=data.get('license_type', 'standard'),
        documents_per_employee=data['documents_per_employee'],
        pages_per_document=data['pages_per_document'],
        turnover_percentage=data['turnover_percentage'],
        average_salary=data['average_salary'],
        courier_delivery_cost=data['courier_delivery_cost'],
        hr_delivery_percentage=data.get('hr_delivery_percentage', 0)
    )

    session.add(user_data)
    session.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã
    if 'hr_delivery_percentage' in data:
        # –†–∞—Å—á–µ—Ç—ã
        documents_per_year = calculate_documents_per_year(data)
        pages_per_year = calculate_pages_per_year(data)
        total_paper_costs = calculate_total_paper_costs(pages_per_year)
        total_logistics_costs = calculate_total_logistics_costs(
            data, documents_per_year)
        cost_per_minute = calculate_cost_per_minute(data)
        total_operations_costs = calculate_total_operations_costs(
            data, documents_per_year, cost_per_minute)

        # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        license_costs = session.query(LicenseCosts).first()
        total_license_costs = calculate_total_license_costs(data, license_costs)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data.total_paper_costs = total_paper_costs
        user_data.total_logistics_costs = total_logistics_costs
        user_data.total_operations_costs = total_operations_costs
        user_data.total_license_costs = total_license_costs
        session.commit()

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = (
            f"<b>–ß–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {data['employee_count']}\n"
            f"<b>–ß–∏—Å–ª–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:</b> {data['hr_specialist_count']}\n"
            f"<b>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ–¥ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {
                data['documents_per_employee']}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:</b> {data['pages_per_document']}\n"
            f"<b>–¢–µ–∫—É—á–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:</b> {data['turnover_percentage']}%\n"
            f"<b>–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</b> {data['average_salary']} —Ä—É–±.\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {
                data['courier_delivery_cost']} —Ä—É–±.\n"
            f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {
                data.get('hr_delivery_percentage', 0)}%\n"
            "<b>–ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> "
            f"<u>{get_tariff_name(data)}</u>\n"
        )
        await message.answer(
            f"<b>–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n{results}",
            reply_markup=get_confirmation_keyboard(),
            parse_mode=ParseMode.HTML)
    else:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –ø–æ–ª–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
        session.commit()

    session.close()


async def contact_me(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "<b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_name)
    await state.update_data(user_id=callback_query.from_user.id)


async def process_contact_name(message: Message, state: FSMContext):
    await state.update_data(contact_name=message.text)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_phone)


async def process_contact_phone(message: Message, state: FSMContext):
    await state.update_data(contact_phone=message.text)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.contact_email)


async def process_contact_email(message: Message, state: FSMContext):
    await state.update_data(contact_email=message.text)
    await message.answer(
        "<b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>",
        parse_mode=ParseMode.HTML)
    await state.set_state(Form.organization_name)


async def process_contact_preference(message: Message, state: FSMContext):
    await state.update_data(contact_preference=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É, "
        "—Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üíô",
        reply_markup=get_retry_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await send_contact_data(state)
    await state.clear()


async def process_organization_name(message: Message, state: FSMContext):
    await state.update_data(organization_name=message.text)
    await message.answer(
        "<b>–°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏ –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É, "
        "—Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è‚ù§.</b>",
        reply_markup=get_start_keyboard(), parse_mode=ParseMode.HTML)
    await send_contact_data(state)
    await state.clear()


async def send_contact_data(state: FSMContext):
    data = await state.get_data()
    if 'user_id' not in data:
        raise KeyError("user_id is missing in state data")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    required_fields = [
        'contact_name', 'contact_phone', 'contact_email', 'organization_name'
    ]
    missing_fields = [field for field in required_fields if field not in data]

    if missing_fields:
        # –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        missing_fields_text = ", ".join(missing_fields)
        await bot.send_message(
            chat_id=data['user_id'],
            text=f"<b>–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:</b> {missing_fields_text}.\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è, —á—Ç–æ–±—ã "
                 "–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫.",
            parse_mode=ParseMode.HTML
        )
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session()
    user_data_entries = session.query(UserData).filter_by(
        user_id=data['user_id']).order_by(UserData.timestamp.desc()).all()
    session.close()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if user_data_entries:
        latest_entry = user_data_entries[0]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
        user_data_info = (
            f"<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> <u>{get_tariff_name(data)}</u>\n"
            f"<b>–ß–∏—Å–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b> {latest_entry.employee_count}\n"
            f"<b>–ß–∏—Å–ª–æ –∫–∞–¥—Ä–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:</b> {
                latest_entry.hr_specialist_count}\n"
            f"<b>–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≥–æ–¥ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b> {
                latest_entry.documents_per_employee}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ:</b> {latest_entry.pages_per_document}\n"
            f"<b>–¢–µ–∫—É—á–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö:</b> {
                latest_entry.turnover_percentage}%\n"
            f"<b>–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</b> {latest_entry.average_salary} —Ä—É–±.\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä—Å–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {
                latest_entry.courier_delivery_cost} —Ä—É–±.\n"
            f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {
                latest_entry.hr_delivery_percentage}%\n"
            f"<b>–°—É–º–º–∞ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–∞—Ç –Ω–∞ –ö–î–ü –Ω–∞ –±—É–º–∞–≥–µ:</b> {
                format_number(
                    latest_entry.total_paper_costs + latest_entry.total_logistics_costs +
                    latest_entry.total_operations_costs
                    ) if latest_entry.total_paper_costs is not None and latest_entry.total_logistics_costs is not None and latest_entry.total_operations_costs is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Ä—É–±.\n"
            f"<b>–°—É–º–º–∞ –ö–≠–î–û –æ—Ç HRlink:</b> {
                format_number(
                    latest_entry.total_license_costs
                    ) if latest_entry.total_license_costs is not None else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} —Ä—É–±.\n"
            f"<b>–í—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞:</b> {latest_entry.timestamp}\n"
        )
    else:
        user_data_info = "<b>–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—á–µ—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    contact_info = (
        "<b>–ö–õ–ò–ï–ù–¢ –û–°–¢–ê–í–ò–õ –ó–ê–Ø–í–ö–£</b>\n"
        f"<b>–ò–º—è:</b> {data['contact_name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>+{data['contact_phone']}</code>\n"
        f"<b>Email:</b> <code>{data['contact_email']}</code>\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</b> {data['organization_name']}\n"
        f"<b>–¢–∏–ø –ª–∏—Ü–µ–Ω–∑–∏–∏:</b> <u>{get_tariff_name(data)}</u>\n"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    await bot.send_message(
        chat_id=CHAT_ID, text=contact_info,
        parse_mode=ParseMode.HTML)
    await bot.send_message(
        chat_id=CHAT_ID, text=user_data_info,
        parse_mode=ParseMode.HTML)


async def process_callback(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == "restart":
        await restart_form(callback_query.message, state)
    elif callback_query.data == "stop":
        await stop_form(callback_query.message, state)
    elif callback_query.data == "confirm":
        await confirm_data(callback_query.message, state)


async def confirm_data(message: Message, state: FSMContext):
    data = await state.get_data()
    session = Session()

    # –†–∞—Å—á–µ—Ç—ã
    documents_per_year = calculate_documents_per_year(data)
    pages_per_year = calculate_pages_per_year(data)
    total_paper_costs = calculate_total_paper_costs(pages_per_year)
    total_logistics_costs = calculate_total_logistics_costs(
        data, documents_per_year)
    cost_per_minute = calculate_cost_per_minute(data)
    total_operations_costs = calculate_total_operations_costs(
        data, documents_per_year, cost_per_minute)

    # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    license_costs = session.query(LicenseCosts).first()
    total_license_costs = calculate_total_license_costs(data, license_costs)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    user_text1 = (
        "<b>–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´ –ü–û –í–í–ï–î–ï–ù–ù–´–ú –î–ê–ù–ù–´–ú</b>\n"
        "\n"
        f"<b>–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –±—É–º–∞–∂–Ω–æ–µ –ö–î–ü: {
            format_number(
                total_paper_costs + total_logistics_costs +
                total_operations_costs
                )
                }</b> —Ä—É–±.\n"
        "\n"
        f"–ü–µ—á–∞—Ç—å –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{
            format_number(total_paper_costs)}</b> —Ä—É–±.\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: <b>{
            format_number(total_logistics_costs)}</b> —Ä—É–±.\n"
        "–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–¥—Ä–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, "
        f"–∫–æ—Ç–æ—Ä–æ–µ –æ–Ω —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏: <b>{
            format_number(total_operations_costs)}</b> —Ä—É–±.\n"
        "\n"
        )

    user_text2 = (
        f"–í–Ω–µ–¥—Ä–∏–≤ –ö–≠–î–û –æ—Ç HRlink, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å <b>{
            format_number(
                total_paper_costs + total_logistics_costs +
                total_operations_costs - total_license_costs)}</b> —Ä—É–±. "
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å HRlink –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç: {
            format_number(total_license_costs)}</b> —Ä—É–±. \n"
        "<u><i>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –ö–≠–î–û –æ—Ç HRlink –≤ –º–µ—Å—è—Ü –æ—Ç:</i></u> "
        f"<b>{format_number(total_license_costs / 12)}</b>—Ä—É–±.\n"
        "\n"
        "–¢–æ—á–Ω–∞—è —Ü–µ–Ω–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."
        "\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "\n"
        "‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å —É—á–µ—Ç–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ;\n"
        "‚Äî –Ω–∞–π–º –∏ —Ä–∞–±–æ—Ç—É —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏, —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º–∏ –∏ –ø–æ –ì–ü–•;\n"
        "‚Äî –ª–µ–≥–∏—Ç–∏–º–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤;\n"
        "‚Äî —É–¥–æ–±–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞;\n"
        "‚Äî –≥–∏–±–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã;\n"
        "‚Äî –≤—Å–µ –≤–∏–¥—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π."
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –∏ —Ü–µ–Ω–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    tariff_name = get_tariff_name(data)
    employee_license_cost = data.get("employee_license_cost", 700)
    user_text2 += (
        f"\n\n<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–∞—Ä–∏—Ñ:</b> {tariff_name}\n"
        f"<b>–¶–µ–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç:</b> {employee_license_cost} —Ä—É–±."
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    graph_path = generate_cost_graph(
        total_paper_costs, total_logistics_costs,
        total_operations_costs, total_license_costs
    )
    await message.answer_photo(FSInputFile(graph_path))

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    os.remove(graph_path)

    # –í—ã–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤
    await message.answer(user_text1, parse_mode=ParseMode.HTML)
    await message.answer(user_text2, parse_mode=ParseMode.HTML)

    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ <b>–∑–∞—è–≤–∫—É</b>, –∏ –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö "
        "–ö–≠–î–û-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã HRlink, –ø–æ–º–æ–∂–µ–º –æ–±–æ—Å–Ω–æ–≤–∞—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ "
        "–ø–µ—Ä–µ–¥ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.",
        reply_markup=get_contact_keyboard(),
        parse_mode=ParseMode.HTML
    )

    await state.clear()
    session.close()


async def echo(message: Message):
    user_text = (
        '–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ\n'
        '–ï—Å–ª–∏ –í—ã –≤–≤–æ–¥–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É, —Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n'
        '–ï—Å–ª–∏ –í—ã –≤–≤–æ–¥–∏–ª–∏ —á–∏—Å–ª–æ, –ø–æ—Ç–æ–≤—Ä–∏—Ç–µ, —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤!'
    )
    await message.answer(
        user_text, reply_markup=get_start_keyboard(),
        parse_mode=ParseMode.HTML)


async def send_new_user_notification(user_id: int, username: str):
    notification_text = (
        f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n"
        f"ID: {user_id}\n"
        f"Username: {username}"
    )
    await bot.send_message(chat_id=CHAT_ID, text=notification_text)


def format_number(value):
    return "{:,.0f}".format(value).replace(',', ' ')


def get_tariff_name(data):
    license_type = data.get('license_type', 'standard')
    if license_type == 'lite':
        return "HRlink Lite"
    elif license_type == 'standard':
        return "HRlink Standard"
    elif license_type == 'enterprise':
        return "HRlink Enterprise"
    else:
        return "HRlink Standard"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é